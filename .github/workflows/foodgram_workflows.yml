name: Django-app workflow

on:
  push:
    branches: [master]

jobs:
  tests:
    # «Раннер» — создание изолированного окружения с последней версией Ubuntu
    runs-on: ubuntu-latest

    steps:
    # Запуск actions checkout — готового скрипта
    # для клонирования репозитория
    - uses: actions/checkout@v2
    - name: Set up Python
      # Запуск actions setup-python — готового скрипта
      # для развёртывания окружения Python
      uses: actions/setup-python@v2
      with:
        # Выбор версии Python
        python-version: 3.8

    - name: Install dependencies
      run: |
        # обновление pip
        python -m pip install --upgrade pip
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # установка зависимостей
        pip install -r backend/requirements.txt

    - name: Test with flake8 and django tests
      run: |
        # запуск проверки проекта по flake8
        python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub Backend
        # Пуш образа в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./backend
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
      - name: Push to Docker Hub Frontend
        # Пуш образа в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./frontend
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    name: Deploy_to_the_server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d

#   deploy:
#       runs-on: ubuntu-latest
#       needs: build_and_push_to_docker_hub
#       if: contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/main')
#       steps:
#       - name: executing remote ssh commands to deploy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USER }}
#           key: ${{ secrets.SSH_KEY }}
#           passphrase: ${{ secrets.PASSPHRASE }}
#           script: |
#             cd infra/
#             sudo docker pull kondrrr/foodgram_backend:latest
#             sudo docker pull kondrrr/foodgram_frontend:latest
#             sudo docker-compose stop
#             sudo docker-compose rm backend
#             sudo rm .env
#             touch .env
#             echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
#             echo DB_NAME=${{ secrets.DB_NAME }} >> .env
#             echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#             echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#             echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#             echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#             sudo docker-compose up -d
#   send_message:
#     runs-on: ubuntu-latest
#     needs: deploy
#     steps:
#     - name: send message
#       uses: appleboy/telegram-action@master
#       with:
#         to: ${{ secrets.TELEGRAM_TO }}
#         token: ${{ secrets.TELEGRAM_TOKEN }}
#         message: ${{ github.workflow }} успешно выполнен!